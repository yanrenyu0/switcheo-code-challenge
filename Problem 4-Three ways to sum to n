//recursive approach
//time complexity O(n), space complexity O(n)
func sum_to_n_a(n int) int {
	if n == 0 {
		return 0
	} else if n > 0 {
		return n + sum_to_n_a(n-1)
	} else {
		return n + sum_to_n_a(n+1)
	}
}

//iterative approach
//time complexity O(n), space complexity O(1)
func sum_to_n_b(n int) int {
	sum := 0
	if n >= 0 {
		for i := 1; i <= n; i++ {
			sum += i
		}
	} else {
		for i := n; i <= 0; i++ {
			sum += i
		}
	}
	return sum
}

//using formula
//time complexity O(1), space complexity O(1), most efficient implementation
func sum_to_n_c(n int) int {
	if n >= 0 {
		return n * (n + 1) / 2
	}
	// Sum of integers from n to 0
	return n * (1 - n) / 2
}